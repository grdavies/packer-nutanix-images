# This is a basic workflow to help you get started with Actions

name: build-ntnx-images

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
    #branches: [ main ]

  #schedule:
    # * is a special character in YAML so you have to quote this string
    #- cron:  '30 1 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    runs-on: [ self-hosted, packer ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: AutoModality/action-clean@v1
      - uses: actions/checkout@v2
        with:
          submodules: true

  packer-build-stage-1:
    needs: setup
    runs-on: [ self-hosted, packer ]
    strategy:
      max-parallel: 1
      matrix:
        include:
          - os_type: "linux"
            os: "centos"
            os_ver: "7.9"
            os_build: "2009"
    steps:
      - name: packer init ${{ matrix.os }} ${{ matrix.os_ver }} ${{ matrix.os_build }} stage 1
        working-directory: ${{ matrix.os }}/
        run: /usr/bin/packer init stage1/

      - name: packer validate ${{ matrix.os }} ${{ matrix.os_ver }} ${{ matrix.os_build }} stage 1
        working-directory: ${{ matrix.os }}/
        run: /usr/bin/packer validate --var-file ${{ matrix.os }}-${{ matrix.os_ver }}.${{ matrix.os_build }}.pkrvars.hcl stage1/

      - name: packer build ${{ matrix.os }} ${{ matrix.os_ver }} ${{ matrix.os_build }} stage 1
        working-directory: ${{ matrix.os }}/
        run: /usr/bin/packer build --var-file ${{ matrix.os }}-${{ matrix.os_ver }}.${{ matrix.os_build }}.pkrvars.hcl stage1/

  packer-build-stage-2:
    needs: packer-build-stage-1
    runs-on: [ self-hosted, packer ]
    strategy:
      max-parallel: 1
      matrix:
        include:
          - os_type: "linux"
            os: "centos"
            os_ver: "7.9"
            os_build: "2009"
    steps:
      - name: packer init ${{ matrix.os }} ${{ matrix.os_ver }} ${{ matrix.os_build }} stage 2
        working-directory: ${{ matrix.os }}/
        run: /usr/bin/packer init stage2/

      - name: packer validate ${{ matrix.os }} ${{ matrix.os_ver }} ${{ matrix.os_build }} stage 2
        working-directory: ${{ matrix.os }}/
        run: /usr/bin/packer validate --var-file ${{ matrix.os }}-${{ matrix.os_ver }}.${{ matrix.os_build }}.pkrvars.hcl stage2/

      - name: packer build ${{ matrix.os }} ${{ matrix.os_ver }} ${{ matrix.os_build }} stage 2
        working-directory: ${{ matrix.os }}/
        run: /usr/bin/packer build --var-file ${{ matrix.os }}-${{ matrix.os_ver }}.${{ matrix.os_build }}.pkrvars.hcl stage2/

  upload-images:
    runs-on: [ self-hosted, packer ]
    needs: packer-build-stage-2
    strategy:
      matrix:
        include:
          - os_type: "linux"
            os: "centos"
            os_ver: "7.9"
            os_build: "2009"
            image_type: "basic"
    steps:
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v2
        env:
          JF_ARTIFACTORY_1: ${{ secrets.JF_ARTIFACTORY_SECRET_1 }}
      - name: Get JFrog CLI Version
        run: jfrog --version
      - name: Ping Artifactory Server
        run: jfrog rt ping

      - name: Upload ${{ matrix.os }} ${{ matrix.os_ver }} ${{ matrix.os_build }} Nutanix Best Practice Image (Basic Partitioning)
        run: jfrog rt u ${{ matrix.os }}/stage2/kvm/basic-ntnx-template/${{ matrix.os }}-${{ matrix.os_ver }}-basic-ntnx-template.qcow2 ntnx-images/${{ matrix.os }}/${{ matrix.os }}-${{ matrix.os_ver }}-ntnx.qcow2 --project ntnx --flat --target-props "os_type=${{ matrix.os_type }};os=${{ matrix.os }};os_ver=${{ matrix.os_ver }};os_arch=x86_64"
      - name: Upload ${{ matrix.os }} ${{ matrix.os_ver }} ${{ matrix.os_build }} Nutanix Best Practice Image Checksum (Basic Partitioning)
        run: jfrog rt u ${{ matrix.os }}/stage2/kvm/basic-ntnx-template/${{ matrix.os }}-${{ matrix.os_ver }}-basic-ntnx-template.md5.checksum ntnx-images/${{ matrix.os }}/${{ matrix.os }}-${{ matrix.os_ver }}-ntnx.qcow2 --project ntnx --flat --target-props "os_type=${{ matrix.os_type }};os=${{ matrix.os }};os_ver=${{ matrix.os_ver }};os_arch=x86_64"

      - name: Upload ${{ matrix.os }} ${{ matrix.os_ver }} ${{ matrix.os_build }} Nutanix Best Practice Image Hardened (Basic Partitioning)
        run: jfrog rt u ${{ matrix.os }}/stage2/kvm/basic-ntnx-hardened-template/${{ matrix.os }}-${{ matrix.os_ver }}-basic-ntnx-hardened-template.qcow2 ntnx-images/${{ matrix.os }}/${{ matrix.os }}-${{ matrix.os_ver }}-lvm-ntnx.qcow2 --project ntnx --flat --target-props "os_type=${{ matrix.os_type }};os=${{ matrix.os }};os_ver=${{ matrix.os_ver }};os_arch=x86_64"
      - name: Upload ${{ matrix.os }} ${{ matrix.os_ver }} ${{ matrix.os_build }} Nutanix Best Practice Image Hardened Checksum (Basic Partitioning)
        run: jfrog rt u ${{ matrix.os }}/stage2/kvm/basic-ntnx-hardened-template/${{ matrix.os }}-${{ matrix.os_ver }}-basic-ntnx-hardened-template.md5.checksum ntnx-images/${{ matrix.os }}/${{ matrix.os }}-${{ matrix.os_ver }}-lvm-ntnx.qcow2 --project ntnx --flat --target-props "os_type=${{ matrix.os_type }};os=${{ matrix.os }};os_ver=${{ matrix.os_ver }};os_arch=x86_64"

      - name: Upload ${{ matrix.os }} ${{ matrix.os_ver }} ${{ matrix.os_build }} Nutanix Best Practice Image (LVM Partitioning)
        run: jfrog rt u ${{ matrix.os }}/stage2/kvm/lvm-ntnx-template/${{ matrix.os }}-${{ matrix.os_ver }}-lvm-ntnx-template.qcow2 ntnx-images/${{ matrix.os }}/hardened --project ntnx --flat --target-props "os_type=${{ matrix.os_type }};os=${{ matrix.os }};os_ver=${{ matrix.os_ver }};os_arch=x86_64"
      - name: Upload ${{ matrix.os }} ${{ matrix.os_ver }} ${{ matrix.os_build }} Nutanix Best Practice Image Checksum (LVM Partitioning)
        run: jfrog rt u ${{ matrix.os }}/stage2/kvm/lvm-ntnx-template/${{ matrix.os }}-${{ matrix.os_ver }}-lvm-ntnx-template.md5.checksum ntnx-images/${{ matrix.os }}/hardened --project ntnx --flat --target-props "os_type=${{ matrix.os_type }};os=${{ matrix.os }};os_ver=${{ matrix.os_ver }};os_arch=x86_64"

      - name: Upload ${{ matrix.os }} ${{ matrix.os_ver }} ${{ matrix.os_build }} Nutanix Best Practice Image Hardened (LVM Partitioning)
        run: jfrog rt u ${{ matrix.os }}/stage2/kvm/lvm-ntnx-hardened-template/${{ matrix.os }}-${{ matrix.os_ver }}-lvm-ntnx-hardened-template.qcow2 ntnx-images/${{ matrix.os }}/hardened --project ntnx --flat --target-props "os_type=${{ matrix.os_type }};os=${{ matrix.os }};os_ver=${{ matrix.os_ver }};os_arch=x86_64"
      - name: Upload ${{ matrix.os }} ${{ matrix.os_ver }} ${{ matrix.os_build }} Nutanix Best Practice Image Hardened Checksum (LVM Partitioning)
        run: jfrog rt u ${{ matrix.os }}/stage2/kvm/lvm-ntnx-hardened-template/${{ matrix.os }}-${{ matrix.os_ver }}-lvm-ntnx-hardened-template.md5.checksum ntnx-images/${{ matrix.os }}/hardened --project ntnx --flat --target-props "os_type=${{ matrix.os_type }};os=${{ matrix.os }};os_ver=${{ matrix.os_ver }};os_arch=x86_64"

  cleanup:
    runs-on: [ self-hosted, packer ]
    needs: upload-images
    steps:
      - uses: AutoModality/action-clean@v1
